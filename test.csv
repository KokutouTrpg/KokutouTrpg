0,10000,    RMSprop,0,0.08376,2.30559,0.0833,2.3056,,
0,10000,    RMSprop,10,0.42466,1.75151,0.4258,1.74823,標準,default
0,10000,    RMSprop,20,0.45308,1.64,0.4535,1.6398,標準,default
0,10000,    RMSprop,30,0.518,1.41462,0.5053,1.42025,標準,default
0,10000,    RMSprop,40,0.52366,1.36242,0.5174,1.37686,標準,default
0,10000,    RMSprop,50,0.59146,1.23087,0.5762,1.25272,標準,default
0,10000,    RMSprop,60,0.6135,1.13961,0.5981,1.17645,標準,default
0,10000,    RMSprop,70,0.63772,1.06463,0.6226,1.11094,標準,default
0,10000,    RMSprop,80,0.63614,1.05026,0.6117,1.10786,標準,default
0,10000,    RMSprop,90,0.67104,0.96494,0.6395,1.03621,標準,default
0,10000,    RMSprop,100,0.68282,0.92185,0.6493,1.00659,標準,default
0,10000,       Adam,0,0.10078,2.30685,0.1009,2.30694,標準,default
0,10000,       Adam,10,0.42934,1.58475,0.4339,1.5794,標準,default
0,10000,       Adam,20,0.5007,1.37753,0.4997,1.38518,標準,default
0,10000,       Adam,30,0.57374,1.19534,0.5618,1.21965,標準,default
0,10000,       Adam,40,0.60194,1.12046,0.5813,1.1634,標準,default
0,10000,       Adam,50,0.6476,0.9984,0.6206,1.0606,標準,default
0,10000,       Adam,60,0.68832,0.89929,0.6567,0.98362,標準,default
0,10000,       Adam,70,0.6927,0.87596,0.6559,0.97978,標準,default
0,10000,       Adam,80,0.73024,0.78707,0.6827,0.91564,標準,default
0,10000,       Adam,90,0.73618,0.75891,0.6822,0.91211,標準,default
0,10000,       Adam,100,0.76502,0.69027,0.7008,0.86891,標準,default
0,10000,        SGD,0,0.1249,2.31696,0.1255,2.31719,標準,default
0,10000,        SGD,10,0.17748,2.27383,0.1825,2.2741,標準,default
0,10000,        SGD,20,0.22112,2.24671,0.226,2.24726,標準,default
0,10000,        SGD,30,0.24822,2.21068,0.2505,2.21149,標準,default
0,10000,        SGD,40,0.2631,2.16639,0.2657,2.1671,標準,default
0,10000,        SGD,50,0.27808,2.11996,0.2832,2.12048,標準,default
0,10000,        SGD,60,0.29096,2.07498,0.2967,2.07516,標準,default
0,10000,        SGD,70,0.29756,2.03485,0.3017,2.03465,標準,default
0,10000,        SGD,80,0.30508,2.00331,0.3064,2.00271,標準,default
0,10000,        SGD,90,0.31188,1.97948,0.3142,1.9785,標準,default
0,10000,        SGD,100,0.3166,1.96226,0.3204,1.96096,標準,default
0,1000,    RMSprop,0,0.1,2.32242,0.0999,2.32258,標準,default
0,1000,    RMSprop,10,0.5857,1.20111,0.5621,1.266,標準,default
0,1000,    RMSprop,20,0.7569,0.72746,0.6849,0.90974,標準,default
0,1000,    RMSprop,30,0.8511,0.45288,0.7195,0.81814,標準,default
0,1000,    RMSprop,40,0.92592,0.27147,0.7306,0.82518,標準,default
0,1000,    RMSprop,50,0.95804,0.15718,0.7317,0.91007,標準,default
0,1000,    RMSprop,60,0.98736,0.0754,0.7399,0.92895,標準,default
0,1000,    RMSprop,70,0.99722,0.03109,0.751,0.96613,標準,default
0,1000,    RMSprop,80,0.99782,0.02307,0.7382,1.07672,標準,default
0,1000,    RMSprop,90,0.99894,0.0105,0.7457,1.18058,標準,default
0,1000,    RMSprop,100,0.9995,0.01144,0.7438,1.13948,標準,default
0,1000,       Adam,0,0.09652,2.30796,0.0964,2.30698,標準,default
0,1000,       Adam,10,0.69198,0.89166,0.6642,0.97303,標準,default
0,1000,       Adam,20,0.79716,0.62259,0.7242,0.803,標準,default
0,1000,       Adam,30,0.8637,0.42872,0.7459,0.73946,標準,default
0,1000,       Adam,40,0.91422,0.29496,0.7519,0.73795,標準,default
0,1000,       Adam,50,0.9521,0.19295,0.7597,0.75591,標準,default
0,1000,       Adam,60,0.976,0.11864,0.758,0.79597,標準,default
0,1000,       Adam,70,0.98902,0.07984,0.7607,0.82251,標準,default
0,1000,       Adam,80,0.99216,0.04964,0.7593,0.91093,標準,default
0,1000,       Adam,90,0.99534,0.03327,0.7625,0.96218,標準,default
0,1000,       Adam,100,0.9971,0.02334,0.7621,1.02754,標準,default
0,1000,        SGD,0,0.10396,2.30341,0.1052,2.30237,標準,default
0,1000,        SGD,10,0.3083,1.97059,0.3142,1.96644,標準,default
0,1000,        SGD,20,0.36454,1.83964,0.3715,1.83541,標準,default
0,1000,        SGD,30,0.40712,1.71346,0.4118,1.70867,標準,default
0,1000,        SGD,40,0.43272,1.62723,0.4385,1.62332,標準,default
0,1000,        SGD,50,0.46122,1.53733,0.4648,1.53278,標準,default
0,1000,        SGD,60,0.48678,1.47028,0.4834,1.46732,標準,default
0,1000,        SGD,70,0.50364,1.4174,0.499,1.41656,標準,default
0,1000,        SGD,80,0.51846,1.37406,0.5123,1.37627,標準,default
0,1000,        SGD,90,0.53608,1.32738,0.5284,1.33238,標準,default
0,1000,        SGD,100,0.54752,1.28903,0.5377,1.29682,標準,default
0,100,    RMSprop,0,0.06424,2.3228,0.064,2.32189,標準,default
0,100,    RMSprop,10,0.85194,0.46407,0.7301,0.8077,標準,default
0,100,    RMSprop,20,0.87564,0.5483,0.7165,0.9082,標準,default
0,100,    RMSprop,30,0.87926,0.51022,0.7072,0.93021,標準,default
0,100,    RMSprop,40,0.8554,0.56053,0.6936,0.94809,標準,default
0,100,    RMSprop,50,0.86802,0.50226,0.6996,0.9537,標準,default
0,100,    RMSprop,60,0.84692,0.53424,0.697,0.99768,標準,default
0,100,    RMSprop,70,0.81432,0.64216,0.6682,1.02155,標準,default
0,100,    RMSprop,80,0.78056,0.73897,0.6416,1.08187,標準,default
0,100,    RMSprop,90,0.82244,0.64761,0.6852,0.98753,標準,default
0,100,    RMSprop,100,0.71262,0.96821,0.6013,1.19625,標準,default
0,100,       Adam,0,0.09698,2.3137,0.0969,2.31407,標準,default
0,100,       Adam,10,0.83948,0.47521,0.7269,0.77847,標準,default
0,100,       Adam,20,0.94184,0.19748,0.7435,0.81911,標準,default
0,100,       Adam,30,0.98194,0.08481,0.7434,0.92094,標準,default
0,100,       Adam,40,0.99046,0.04465,0.7416,1.08649,標準,default
0,100,       Adam,50,0.99452,0.02915,0.7425,1.18825,標準,default
0,100,       Adam,60,0.99794,0.01637,0.743,1.21002,標準,default
0,100,       Adam,70,0.99728,0.01488,0.7401,1.35061,標準,default
0,100,       Adam,80,0.99912,0.00768,0.7413,1.30718,標準,default
0,100,       Adam,90,0.99822,0.00962,0.7355,1.45178,標準,default
0,100,       Adam,100,0.99956,0.0046,0.7459,1.44731,標準,default
0,100,        SGD,0,0.0955,2.30785,0.0963,2.30731,標準,default
0,100,        SGD,10,0.52564,1.35583,0.5218,1.36191,標準,default
0,100,        SGD,20,0.61768,1.10267,0.5994,1.14157,標準,default
0,100,        SGD,30,0.67704,0.93341,0.6412,1.01469,標準,default
0,100,        SGD,40,0.72532,0.79825,0.6713,0.93462,標準,default
0,100,        SGD,50,0.7732,0.67673,0.6972,0.86743,標準,default
0,100,        SGD,60,0.80176,0.60095,0.703,0.85089,標準,default
0,100,        SGD,70,0.84336,0.48758,0.72,0.80547,標準,default
0,100,        SGD,80,0.87314,0.40779,0.7272,0.79553,標準,default
0,100,        SGD,90,0.90598,0.33107,0.734,0.77926,標準,default
0,100,        SGD,100,0.92518,0.27122,0.7406,0.78388,標準,default
0,1000,    RMSprop,0,0.09934,2.30398,0.1018,2.30385,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.16))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,10,0.60778,1.10798,0.586,1.15902,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.15))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,20,0.74358,0.74759,0.6955,0.87682,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.14))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,30,0.80616,0.58569,0.7226,0.79593,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.13))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,40,0.83144,0.50984,0.7255,0.79318,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.12))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,50,0.90628,0.33888,0.7618,0.69092,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.11))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,60,0.93814,0.24552,0.774,0.6619,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.10))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,70,0.95248,0.21311,0.7773,0.66413,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.9))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,80,0.95302,0.19673,0.7756,0.68972,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.8))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,90,0.98086,0.12058,0.7929,0.63561,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.7))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,100,0.9825,0.11774,0.7913,0.64529,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.6))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,0,0.08662,2.30261,0.0839,2.30286,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.5))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,10,0.68778,0.90212,0.6531,0.98141,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.4))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,20,0.7773,0.66529,0.7133,0.82269,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.3))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,30,0.84468,0.49006,0.7474,0.72539,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.2))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,40,0.88482,0.3884,0.7602,0.6945,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.1))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,50,0.92384,0.29544,0.7729,0.65508,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.0))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,60,0.94638,0.24065,0.7843,0.62978,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.1))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,70,0.96164,0.19759,0.7804,0.6309,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.2))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,80,0.97134,0.17527,0.7856,0.62604,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.3))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,90,0.9808,0.15096,0.7925,0.61058,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.4))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,100,0.98438,0.12659,0.7924,0.6114,Pooling⇒畳み込み+do(0.5),"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Dropout(0.25))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        64,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    model.add(Dropout(0.5))@    model.add(Dense(512, activation=""relu""))@    model.add(Dropout(0.5))@    #model.add(Dropout(0.5))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,0,0.10036,2.30517,0.0999,2.30477,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.5))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,10,0.60516,1.11726,0.5682,1.21351,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.6))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,20,0.8224,0.54156,0.6945,0.89353,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.7))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,30,0.94922,0.19062,0.7225,0.90782,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.8))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,40,0.97212,0.10134,0.7132,1.17706,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.9))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,50,0.99362,0.04162,0.7108,1.23042,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.10))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,60,0.9989,0.00847,0.7284,1.477,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.11))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,70,0.9995,0.00606,0.7292,1.45211,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.12))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,80,0.99924,0.00437,0.7262,1.71451,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.13))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,90,0.9997,0.00188,0.7321,1.70043,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.14))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,100,0.99976,0.00384,0.7267,1.62052,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.15))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,0,0.09764,2.30405,0.0974,2.30363,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.16))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,10,0.72264,0.79155,0.662,0.95856,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.17))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,20,0.88228,0.37403,0.7211,0.82869,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.18))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,30,0.96658,0.13736,0.7263,0.93949,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.19))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,40,0.99338,0.04444,0.7264,1.05983,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.20))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,50,0.99858,0.01717,0.7309,1.18575,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.21))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,60,0.99908,0.00997,0.7283,1.32756,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.22))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,70,0.99972,0.00576,0.7286,1.3807,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.23))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,80,0.99952,0.00495,0.726,1.45398,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.24))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,90,0.99978,0.00341,0.7258,1.5435,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.25))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,       Adam,100,0.9998,0.00245,0.7277,1.53326,Pooling⇒畳み込み,"def network(input_shape, num_classes):@    model = Sequential()@    @    # extract image features by convolutional and max pooling layers@    model.add(Conv2D(@        32,kernel_size=3, padding=""same"",@        input_shape=input_shape, activation=""relu""@    ))@    model.add(Conv2D(@        32,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    model.add(Conv2D(@        8,kernel_size=4, padding=""valid"",strides=(2,2),@        activation=""relu""@    ))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    #model.add(Dropout(0.25))@    #model.add(Conv2D(64, kernel_size=3, padding=""same"", activation=""relu""))@    #model.add(MaxPooling2D(pool_size=(2, 2)))@    # classify the class by fully-connected layers@    model.add(Flatten())@    #model.add(Dense(512, activation=""relu""))@    #model.add(Dropout(0.26))@    model.add(Dense(num_classes))@    model.add(Activation(tf.nn.softmax))@    return model"
0,1000,    RMSprop,0,0.09254,2.30425,0.0967,2.30437,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,10,0.63384,1.06446,0.6109,1.12475,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,20,0.76308,0.73426,0.7008,0.87362,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,30,0.82668,0.56047,0.7242,0.79186,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,40,0.87868,0.42559,0.7442,0.73832,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,50,0.91326,0.33898,0.7445,0.74218,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,60,0.94826,0.23959,0.7586,0.70411,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,70,0.94886,0.2095,0.7536,0.75431,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,80,0.97428,0.14543,0.771,0.69941,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,90,0.98548,0.13935,0.7649,0.70732,default+do(0.5),default+do(0.5)
0,1000,    RMSprop,100,0.98794,0.11125,0.7672,0.71802,default+do(0.5),default+do(0.5)
0,1000,       Adam,0,0.10962,2.31349,0.1126,2.31306,default+do(0.5),default+do(0.5)
0,1000,       Adam,10,0.669,0.96593,0.6392,1.0278,default+do(0.5),default+do(0.5)
0,1000,       Adam,20,0.7649,0.72325,0.7059,0.85517,default+do(0.5),default+do(0.5)
0,1000,       Adam,30,0.82194,0.56284,0.7334,0.76769,default+do(0.5),default+do(0.5)
0,1000,       Adam,40,0.85566,0.47015,0.7433,0.74271,default+do(0.5),default+do(0.5)
0,1000,       Adam,50,0.90192,0.36056,0.7593,0.68843,default+do(0.5),default+do(0.5)
0,1000,       Adam,60,0.92736,0.29472,0.7642,0.67657,default+do(0.5),default+do(0.5)
0,1000,       Adam,70,0.94462,0.23733,0.7677,0.66979,default+do(0.5),default+do(0.5)
0,1000,       Adam,80,0.96082,0.19834,0.7745,0.66621,default+do(0.5),default+do(0.5)
0,1000,       Adam,90,0.97466,0.15743,0.7769,0.65933,default+do(0.5),default+do(0.5)
0,1000,       Adam,100,0.98294,0.12825,0.7791,0.65466,default+do(0.5),default+do(0.5)
