def network(input_shape, num_classes):
    model = Sequential()
    
    # extract image features by convolutional and max pooling layers
    model.add(Conv2D(
        32,kernel_size=3, padding="same",
        input_shape=input_shape, activation="relu"
    ))
    model.add(Dropout(0.1))
    model.add(Conv2D(
        32,kernel_size=3, padding="same",
        activation="relu"
    ))
    model.add(Dropout(0.1))
    model.add(Conv2D(
        32,kernel_size=3, padding="same",
        activation="relu"
    ))
    model.add(Dropout(0.1))
    #model.add(MaxPooling2D(pool_size=(2, 2)))
    #model.add(Dropout(0.1))
    model.add(Conv2D(
        32,kernel_size=4, padding="valid",strides=(2,2),
        activation="relu"
    ))
    model.add(Dropout(0.1))
    model.add(Conv2D(64, kernel_size=3, padding="same", activation="relu"))
    model.add(Dropout(0.1))
    model.add(Conv2D(64, kernel_size=3, padding="same", activation="relu"))
    model.add(Dropout(0.1))
    model.add(Conv2D(64, kernel_size=3, padding="same", activation="relu"))
    model.add(Dropout(0.1))
    #model.add(Dropout(0.1))
    model.add(Conv2D(
        64,kernel_size=4, padding="valid",strides=(2,2),
        activation="relu"
    ))
    #model.add(MaxPooling2D(pool_size=(2, 2)))
    #model.add(Conv2D(64, kernel_size=3, padding="same", activation="relu"))
    #model.add(MaxPooling2D(pool_size=(2, 2)))
    # classify the class by fully-connected layers
    model.add(Flatten())
    model.add(Dropout(0.5))
    model.add(Dense(512, activation="relu"))
    model.add(Dropout(0.5))
    #model.add(Dropout(0.5))
    model.add(Dense(num_classes))
    model.add(Activation(tf.nn.softmax))
    return model
